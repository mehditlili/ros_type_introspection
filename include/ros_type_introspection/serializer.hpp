/*********************************************************************
* Software License Agreement (BSD License)
*
*  Copyright 2016 Mehdi Tlili
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of Willow Garage, Inc. nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
********************************************************************/

#ifndef ROS_INTRO_SERIALIZE_H
#define ROS_INTRO_SERIALIZE_H

#include <array>
#include <sstream>
#include "ros_type_introspection/parser.hpp"
#include "ros_type_introspection/stringtree.hpp"
#include "ros_type_introspection/variant.hpp"
#include <ros_type_introspection/deserializer.hpp>


namespace RosIntrospection{


/**
 * @brief buildRosFlatType is a function that read raw serialized data from a ROS message (generated by
 * a ros bag or a topic) and stored the values of each field in a "flat" container called ROSTypeFlat.
 * For example if you apply this to [geometry_msgs/Pose](http://docs.ros.org/kinetic/api/geometry_msgs/html/msg/Pose.html)
 * the vector ROSTypeFlat::value will contain the following pairs (where ... is the number of that field) :
 *
 *  - Pose.Point.x = ...
 *  - Pose.Point.y = ...
 *  - Pose.Point.z = ...
 *  - Pose.Quaternion.x = ...
 *  - Pose.Quaternion.y = ...
 *  - Pose.Quaternion.z = ...
 *  - Pose.Quaternion.w = ...
 *
 * IMPORTANT: this approach is not meant to be used with use arrays such as maps, point clouds and images.
 * It would require a ridicoulous amount of memory and, franckly, make little sense.
 * For this reason the argument max_array_size is used.
 *
 * @param flat_container  Container to be serialized.
 * @param buffer_ptr  Output, Pointer to the first element of the serialized data.
 */
void buildRosBuffer(std::map<SString, boost::any> value_map,
		    std::map<SString, BuiltinType> type_map,
		    std::map<int, SString> order_map,
		    std::vector<SString> attribute_names,
		    std::vector<uint8_t> &buffer);


void gen_message_skeleton(const ROSTypeList& type_map,
			  ROSType type,
			  SString prefix,
			  ROSTypeFlat* flat_container_output);

 //end namespace
}
#endif // ROS_INTRO_SERIALIZE_H
